/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/channels": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.channels.id"];
          category_id?: parameters["rowFilter.channels.category_id"];
          label?: parameters["rowFilter.channels.label"];
          created_at?: parameters["rowFilter.channels.created_at"];
          unread?: parameters["rowFilter.channels.unread"];
          description?: parameters["rowFilter.channels.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["channels"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** channels */
          channels?: definitions["channels"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.channels.id"];
          category_id?: parameters["rowFilter.channels.category_id"];
          label?: parameters["rowFilter.channels.label"];
          created_at?: parameters["rowFilter.channels.created_at"];
          unread?: parameters["rowFilter.channels.unread"];
          description?: parameters["rowFilter.channels.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.channels.id"];
          category_id?: parameters["rowFilter.channels.category_id"];
          label?: parameters["rowFilter.channels.label"];
          created_at?: parameters["rowFilter.channels.created_at"];
          unread?: parameters["rowFilter.channels.unread"];
          description?: parameters["rowFilter.channels.description"];
        };
        body: {
          /** channels */
          channels?: definitions["channels"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/messages": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          text?: parameters["rowFilter.messages.text"];
          channel_id?: parameters["rowFilter.messages.channel_id"];
          profile_id?: parameters["rowFilter.messages.profile_id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          updated_at?: parameters["rowFilter.messages.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["messages"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          text?: parameters["rowFilter.messages.text"];
          channel_id?: parameters["rowFilter.messages.channel_id"];
          profile_id?: parameters["rowFilter.messages.profile_id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          updated_at?: parameters["rowFilter.messages.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.messages.id"];
          text?: parameters["rowFilter.messages.text"];
          channel_id?: parameters["rowFilter.messages.channel_id"];
          profile_id?: parameters["rowFilter.messages.profile_id"];
          created_at?: parameters["rowFilter.messages.created_at"];
          updated_at?: parameters["rowFilter.messages.updated_at"];
        };
        body: {
          /** messages */
          messages?: definitions["messages"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/servers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.servers.id"];
          label?: parameters["rowFilter.servers.label"];
          img?: parameters["rowFilter.servers.img"];
          created_at?: parameters["rowFilter.servers.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["servers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** servers */
          servers?: definitions["servers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.servers.id"];
          label?: parameters["rowFilter.servers.label"];
          img?: parameters["rowFilter.servers.img"];
          created_at?: parameters["rowFilter.servers.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.servers.id"];
          label?: parameters["rowFilter.servers.label"];
          img?: parameters["rowFilter.servers.img"];
          created_at?: parameters["rowFilter.servers.created_at"];
        };
        body: {
          /** servers */
          servers?: definitions["servers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/categories": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          label?: parameters["rowFilter.categories.label"];
          created_at?: parameters["rowFilter.categories.created_at"];
          server_id?: parameters["rowFilter.categories.server_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["categories"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          label?: parameters["rowFilter.categories.label"];
          created_at?: parameters["rowFilter.categories.created_at"];
          server_id?: parameters["rowFilter.categories.server_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.categories.id"];
          label?: parameters["rowFilter.categories.label"];
          created_at?: parameters["rowFilter.categories.created_at"];
          server_id?: parameters["rowFilter.categories.server_id"];
        };
        body: {
          /** categories */
          categories?: definitions["categories"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  channels: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `categories.id`.<fk table='categories' column='id'/>
     */
    category_id?: number;
    /** Format: text */
    label: string;
    /**
     * Format: timestamp with time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at?: string;
    /**
     * Format: boolean
     * @default false
     */
    unread?: boolean;
    /** Format: text */
    description?: string;
  };
  messages: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    text?: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `channels.id`.<fk table='channels' column='id'/>
     */
    channel_id?: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    profile_id?: number;
    /**
     * Format: timestamp with time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default CURRENT_TIMESTAMP
     */
    updated_at?: string;
  };
  servers: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    label: string;
    /** Format: text */
    img?: string;
    /**
     * Format: timestamp with time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at?: string;
  };
  profiles: {
    /** Format: uuid */
    user_id: string;
    /** Format: text */
    avatar_url?: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    name?: string;
  };
  categories: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    label: string;
    /**
     * Format: timestamp with time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at?: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `servers.id`.<fk table='servers' column='id'/>
     */
    server_id?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description channels */
  "body.channels": definitions["channels"];
  /** Format: integer */
  "rowFilter.channels.id": string;
  /** Format: integer */
  "rowFilter.channels.category_id": string;
  /** Format: text */
  "rowFilter.channels.label": string;
  /** Format: timestamp with time zone */
  "rowFilter.channels.created_at": string;
  /** Format: boolean */
  "rowFilter.channels.unread": string;
  /** Format: text */
  "rowFilter.channels.description": string;
  /** @description messages */
  "body.messages": definitions["messages"];
  /** Format: bigint */
  "rowFilter.messages.id": string;
  /** Format: text */
  "rowFilter.messages.text": string;
  /** Format: integer */
  "rowFilter.messages.channel_id": string;
  /** Format: integer */
  "rowFilter.messages.profile_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.messages.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.messages.updated_at": string;
  /** @description servers */
  "body.servers": definitions["servers"];
  /** Format: integer */
  "rowFilter.servers.id": string;
  /** Format: character varying */
  "rowFilter.servers.label": string;
  /** Format: text */
  "rowFilter.servers.img": string;
  /** Format: timestamp with time zone */
  "rowFilter.servers.created_at": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.user_id": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: integer */
  "rowFilter.profiles.id": string;
  /** Format: character varying */
  "rowFilter.profiles.name": string;
  /** @description categories */
  "body.categories": definitions["categories"];
  /** Format: integer */
  "rowFilter.categories.id": string;
  /** Format: text */
  "rowFilter.categories.label": string;
  /** Format: timestamp with time zone */
  "rowFilter.categories.created_at": string;
  /** Format: integer */
  "rowFilter.categories.server_id": string;
}

export interface operations {}

export interface external {}
